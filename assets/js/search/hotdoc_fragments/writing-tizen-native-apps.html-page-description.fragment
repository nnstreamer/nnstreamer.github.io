fragment_downloaded_cb({"url":"writing-tizen-native-apps.html#page-description","fragment":"This document guides how to write a Tizen Native (C/C++) app with NNStreamer APIs (Tizen Machine-Learning Inference API Set).\nThere are two API sets as of Tizen 5.5 M2, Machine-Learning Inference: \"Pipeline\" and \"Single\".\nWith Pipeline API set, you can construct a GStreamer pipeline with NNStreamer elements and GStreamer elements in the \"whitelist\". GStreamer plugins not listed in the \"whitelist\" are not supported by Pipeline APIs. Note that an alias element, tizencamvideosrc (or ML_TIZEN_CAM_VIDEO_SRC macro), denotes a video camera source, which may vary per device; in other words, you don't need to worry whether it's v4l2src or camsrc or whatsoever. For the list of whitelist elements, refer to the Tizen API doc or /etc/nnstreamer.ini.\nWith Single API set, you can invoke a neural network model with an input tensor/tensors without constructing a full pipeline.\nGet a handle (open a model)\n(Optional) Investigate the required input/output types (dimensions) with utility functions.\nInvoke (provide an input, get an output)\nClose the handle\nNote that set_timeout API allows you to set timeout for invoke function.\nIt allows the flexibility to construct a stream pipeline with complex topology including multiple neural networks and frameworks, different pre/post-processors, data and path manipulators, and various input and output nodes. This is far more rich featured compared to Single API; however, the developer is required to understand GStreamer pipelines. For GStreamer pipelines in general, please refer to GStreamer documents.\nConstruct a pipeline (ml_pipeline_construct) and get a pipeline handle.\n(Optional) Attach callbacks or get other handles from the constructed pipeline. In order to attach callbacks or get handles, the corresponding elements should have names defined so that they can be recognized in run-time.\nStart the pipeline. The callbacks will be invoked during the pipeline execution. You may control it with the additional handles (e.g., input/output switches, valves).\nStop/Restart the pipeline.\nClose the pipeline handle.\nThis allows you to provide a function (callback), which is invoked whenever an output tensor/tensors is available. This can be attached to tensor_sink and appsink with the given name.\nThis allows you to provide a function (callback), which is invoked whenever the state of the constructed pipeline is changed.\nYou may investigate the data types/dimensions/names or get performance-related data.\nThe elements that can be included in the pipeline (with construct API) are limited by the whitelist (defined by /etc/nnstreamer.ini).\nHowever, with an internal API, allowed to platform binaries only (.rpm. not .tpk), the whitelist policy does not apply. The package, nnstreamer-tizen-internal-capi-devel, provides internal APIs; use it with BuildRequires from your platform package .spec file.\nA simple sample Tizen app with Single APIs is at nnstreamer-example.git, SingleSample.\nA simple sample Tizen app with Pipeline APIs is at nnstreamer-example.git, PipelineSample.\nThe official Tizen ML API Documentation will be available after the release of Tizen 5.5. Before the release, you may create doxygen documents created from api/capi/include and api/capi/doc.\n"});