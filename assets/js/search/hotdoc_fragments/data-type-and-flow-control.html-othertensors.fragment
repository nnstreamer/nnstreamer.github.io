fragment_downloaded_cb({"url":"data-type-and-flow-control.html#othertensors","fragment":"other/tensors\nother/tensors,format=static is defined to have multiple instances of tensors in a buffer of a single stream path. Compared to having multiple streams (thus multiple pads) with a tensor per stream (e.g., other/tensor) that goes to or comes from a single element, having a single stream with other/tensors has the following advantages:\nThe GStreamer pad capability of other/tensors is as follows:\nNote that dimension related values are only effective with static or sparse formats.\nWith format=flexible, types and dimensions are not effective.\nThe buffer of other/tensors streams has multiple memory chunks. Each memory chunk represents one single tensor in the buffer format of other/tensor. With the default configuration of GStreamer 1.0, a GstBuffer can hold 16 memory chunks at most. Thus,  other/tensors may include up to 16 static other/tensor and 240 extra other/tensor.\nother/tensors is defined to have multiple instances of tensors in a buffer of a single stream path.\nCompared to having multiple streams (thus, multiple pads) with a single tensor that goes or\n\n\ntensor_filter, which is the main engine to communicate deep neural network frameworks and models, becomes simple and robust. With neural network models requiring multiple input tensors, if the input tensor streams are not fully synchronized, we need to somehow synchronize them and provide all input tensors at the same time to the model. Hereby, being fully synchronized means that the streams should provide new data simultaneously, which requires to have the exactly same framerate and timing, which is mostly impossible. With other/tensors and single input and output streams for tensor_filter, we can delegate the responsibilities of synchronization to GStreamer and its basic plugins, who are extremely good at such tasks.\nDuring transmissions on a stream pipeline, passing through various stream filters, we can guarantee that the same set of input tensors are being processed without the worries of synchronizations after the point of merging or muxing.\n\n"});