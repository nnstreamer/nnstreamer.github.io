fragment_downloaded_cb({"url":"getting-started-android.html#page-description","fragment":"We assume that you already have experienced Android application developments with Android Studio.\nFirst of all, you need to set-up the development environment as following:\nSome required packages should be installed as below.\nDownload and install Android Studio to compile an Android source code.\nYou can see the installation guide here.\nFor example,\nNow, run the Android Studio IDE as follows.\nFinally, install SDK into the $ANDROID_SDK folder as follows.\nThe yes command automatically agrees to the license question for the Android SDK.\nIf your network is maintained a proxy of the office, you need to set-up the proxy and SSL configuration.\nUse the default NDK in Android Studio.\nTo install NDK in Android Studio, navigate to configure -> Appearance & Behavior -> System Settings -> Android SDK -> SDK Tools and then select NDK.\nIf you need to set a specific version, download and decompress it to compile normally a GStreamer-based plugin (e.g., NNStreamer).\nYou can download older version from here.\nYou can get the prebuilt GStreamer binaries from here.\nFor example,\nModify gstreamer-1.0.mk and gstreamer_android-1.0.c.in files for NDK build to prevent error case.\nSupported target ABIs are arm64 and armv7.\nRun the build script in NNStreamer.\nAfter building the Android API, you can find the library(.aar) in $ML_API_ROOT/android_lib.\nTo run the unit-test, you will need an Android Emulator running or a physical device connected and in usb debugging mode.\nMake sure to select the appropriate target ABI for the emulator.\nBefore running the unit-test, you should download the test model and copy it into your target device manually.\nMake directory and copy test model and label files into the internal storage of your own Android target device.\nYou can download these files from nnsuite testcases repository.\nTo check the testcases, run the build script with an option --run_test=yes.\nYou can find the result in $ML_API_ROOT/android_lib.\nAndroid keeps trying to protect app and user data on external storage. As a result, \"scoped storage\" is introduced in Android 10 and enhanced in Android 11.\nIt makes an application has access only to the app-specific directory on external storage.\nWith scoped storage, consider either options below:\n(Recommended) Provide your model files with assets.\nCode example:\nProvide your model files with absolute path.\nCode example:\nIf the TensorFlow Lite model file is provided from external storage, TensorFlow Lite NNAPI delegate fails to use available backend like GPU, DSP, or NPU.\nTo use NNAPI delegate properly, you should provide the model file from internal storage. You may copy the model files into internal app-specific directory (getFilesDir) or cache directory (getCacheDir).\nHere are sample Java methods that copy given files into internal app-specific directory:\n\nHost PC:\n\nOS: Ubuntu 16.04 / 18.04 x86_64 LTS\nAndroid Studio: Ubuntu version\nAndroid SDK: Min version 28 (Pie)\nAndroid NDK: Use default ndk-bundle in Android Studio\nGStreamer: gstreamer-1.0-android-universal-1.16.2\n\n\n\n\nOS: Ubuntu 16.04 / 18.04 x86_64 LTS\nAndroid Studio: Ubuntu version\nAndroid SDK: Min version 28 (Pie)\nAndroid NDK: Use default ndk-bundle in Android Studio\nGStreamer: gstreamer-1.0-android-universal-1.16.2\n\n\nProxy setting: File > Settings > Appearance & Behavior > System Settings > HTTP Proxy\nSSL Certificate:  File > Settings  > Tools > Server Certificates > Register your certificate and check Accept non-trusted certificates automatically\n\n\n\nAdd directory separator (gstreamer-1.0.mk)\n\n\nClear exceptions for native developers (gstreamer_android-1.0.c.in)\n\n\nBuild options\n\nTarget ABI: Default arm64-v8a, specify the ABI (armeabi-v7a, arm64-v8a) to be built for with --target_abi={TARGET-ABI}.\nType: Default all.\n\n\n--build_type=all to include all features.\n\n--build_type=single to enable SingleShot API only.\n\n--build_type=lite to get the minimized library with GStreamer core elements.\n\n\nIncluding sub-plugins: Default TensorFlow-Lite and NNFW enabled.\nTo enable each neural network frameworks, you should download and set-up proper environment.\n\n\n--enable_tflite=yes to build with TensorFlow-Lite.\n\n--enable_snpe=yes to build with SNPE (Qualcomm Snapdragon Neural Processing Engine).\n\n--enable_nnfw=yes to build with NNFW (Samsung on-device neural network inference framework).\n\n--enable_snap=yes to build with SNAP (Samsung Neural Acceleration Platform).\n\n\nRun test: Default no. --run_test=yes to run the instrumentation test.\nOther options\n\n\n--nnstreamer_dir=<path> path to NNStreamer root directory. Default NNSTREAMER_ROOT is used if this is not set.\n\n--ml_api_dir=<path> path to ML API root directory. ML_API_ROOT is used if this is not set.\n\n--result_dir=<path> path to build result. Default path is ML_API_ROOT/android_lib.\n\n--gstreamer_dir=<path> path to GStreamer binaries. Default path is GSTREAMER_ROOT_ANDROID.\n\n--android_sdk_dir=<path> path to Android SDK. Default path is ANDROID_SDK_ROOT.\n\n--android_ndk_dir=<path> path to Android NDK. Default path is ANDROID_NDK_ROOT.\n\n\n\n\n\n\n\n--build_type=all to include all features.\n\n--build_type=single to enable SingleShot API only.\n\n--build_type=lite to get the minimized library with GStreamer core elements.\n\n\n\n--enable_tflite=yes to build with TensorFlow-Lite.\n\n--enable_snpe=yes to build with SNPE (Qualcomm Snapdragon Neural Processing Engine).\n\n--enable_nnfw=yes to build with NNFW (Samsung on-device neural network inference framework).\n\n--enable_snap=yes to build with SNAP (Samsung Neural Acceleration Platform).\n\n\n\n--nnstreamer_dir=<path> path to NNStreamer root directory. Default NNSTREAMER_ROOT is used if this is not set.\n\n--ml_api_dir=<path> path to ML API root directory. ML_API_ROOT is used if this is not set.\n\n--result_dir=<path> path to build result. Default path is ML_API_ROOT/android_lib.\n\n--gstreamer_dir=<path> path to GStreamer binaries. Default path is GSTREAMER_ROOT_ANDROID.\n\n--android_sdk_dir=<path> path to Android SDK. Default path is ANDROID_SDK_ROOT.\n\n--android_ndk_dir=<path> path to Android NDK. Default path is ANDROID_NDK_ROOT.\n\n\nBuild result\n\nnnstreamer-[BUILD_DATE].aar: NNStreamer library for Android\nnnstreamer-native-[BUILD_DATE].zip: shared objects and header files for native developer\n\n\n\n\nPlace your model files in assets/models/.\nCopy it into app-specific directory using AssetManager.\nUse the File object with NNStreamer Java API.\n\n\nPlace your model files in the device's external storage.\n(If your app targets API level 30 (Android 11) or later) Set android:preserveLegacyExternalStorage=\"true\" in your AndroidManifest.xml to use the deprecated method getExternalStorageDirectory.\nUse method getExternalStorageDirectory to get the File object.\nUse the File object with NNStreamer Java API.\n\nNote: Use this option only for test purporse. This assumes that the model files should be in the right hardcoded path in the target device.\n\n"});