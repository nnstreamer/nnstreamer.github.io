fragment_downloaded_cb({"url":"synchronization-policies-at-mux-merge.html#page-description","fragment":"There are multiple synchronization policies for tensor_mux and tensor_merge.\nThey are based on PTS ( presentation timestamp in nanoseconds (as a GstClockTime) ) and assume that every tensor buffer has PTS and can be accessed by GST_BUFFER_PTS(buf).\nHowever, there is stream which does not have PTS such as application/octet-stream. In such cases, tensor_converter generates timestamp and set PTS. If framerate is given, tensor_converter generates proper PTS according to framerate and for the case without framerate, PTS is decided with running time which is calculated as absolute-time - base-time.\nCurrently, three synchronization policies are implemented.\nWith \"nosync\" mode, it merges or mux tensors in an order of updated.\nJust merge/mux buffers from pads without concern of synchronization. First comes, first merge/mux.\nFor the case of merge/mux element which has three pads with different framerate (30/1, 20/1,10/1), it push merged or muxed buffer as below.\n\"Slowest\" policy (sync_mode=slowest) synchronize tensors based on slowest timestamp among pads.\nFinding slowest timestamp among pads and used as base timestamp. It drops buffers which is earlier than this base timestamp. However if the difference with timestamp of previous buffer is smaller than with current buffer, then previous buffer is used.\nFor the case of three pad with different framerates, It merged/muxed\nAs you can see, second and third buffers of srcpad0 are dropped. Because it is smaller than slowest pts (100000000). For the case of 99999999 PTS of srcpad0, it is taken even if it is also smaller than slowest pts. That is because difference with slowest pts ( 100000000 - 99999999 ) is smaller than of next buffer (133333333 - 100000000).\nWith \"Base Pad\", Base timestamp is decided with designated pad which is given by user with sync_option.\nSync_option consists of two variables and first denotes the base pad number and second is duration in nanoseconds ( as a GstClockTime ). In this policy, every buffer which has pts is within duration from base time stamp is merged/muxed. For the case of buffer with greater pts than base timestamp plus duration, previous buffer is going to used instead.\nTest case with \"sync_mode=basepad sync_option=0:33333333\" is below,\nThe base timestamp is 0, so that every buffer of srcpad0 is pushed to downstream.\nThe other is \"Refresh\" policy. The Base timestamp is decided with the pad which receives a new buffer.\nThe above 3 policies require all pads are collected state. It means all of the sinkpads of tensor_mux have to be filled. However, with \"Refresh\", tensor_mux pushes the buffers to srcpad when each sinkpad receives a new buffer. For the sinkpads which not received the new buffer will use again the previous one.\nTest case with \"sync_mode=refresh\" is below,\n"});