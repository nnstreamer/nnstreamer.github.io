fragment_downloaded_cb({"url":"nnstreamer-example/bash_script/example_early_exit/README.html#page-description","fragment":"As networks become more larger and larger, this is limited in real-time processing and low power devices.\nIn order to alleviate these problems, If confidence reaches a certain level, just use the results without processing the data anymore.\nThe concept of pipeline to implement this is as follows:\n\nAs depicted in Fig. 1, the simplest early exit network is configured.\nModel 1 performs inference and model 2 evaluates the result of the model 1. Tensor_if determines whether to exit the network or proceed to the next path according to the confidence.\nIf confidence is high, exit the network immediately and if it is low, proceed to the next early exit module. As shown in Figure 2, multiple early exit modules can be connected.\nWhen the network ends early or reaches the end of the network, a join element connects recently arrived buffer from N input streams to one output pad.\nTo obtain the model file used in the example, you must build NNStreamer.\nHow to build NNStreamer?: link\nWhen you build NNStreamer, you should change build options.\nIf you have successfully completed the build nnstreamer, you can find model files here:\n$ cd $NNST_ROOT/lib/nnstreamer/customfilters\nIf you have successfully completed the build nnstreamer-example, you can find examples here:\nThis example is not the actual eraly exit network, but it shows how to construct pipeline.\nYou can change the input/output and model used in the example to the appropriate framework and model.\ngst-launch-early-exit-normal.sh is difficult to check its operation.\nThis example is easy for the user to understand by adding labels according to the path.\nIf the brightness of the camera is bright, exit the network, and if it is dark, proceed to the next path (In this case, no further steps).\n"});