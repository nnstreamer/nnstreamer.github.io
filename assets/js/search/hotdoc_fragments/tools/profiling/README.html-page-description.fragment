fragment_downloaded_cb({"url":"tools/profiling/README.html#page-description","fragment":"Press here for further information.\nThe gst-instruments tool is an easy-to-use profiler for GStreamer.\nThis guide is experimented on Ubuntu 16.04 x86_64 distribution.\n\nThen, you can see a time cost and a CPU usage in pipeline.\nHawkTracer is a highly portable, low-overhead, configurable profiling tool built in Amazon Video for getting performance metrics from low-end devices.\nThe library provides many different types of events (e.g. CPU usage event, duration tracepoint), but the list can easily be extended by the user.\nThere are 2 functions which always have to be called in projects profiled by HawkTracer: ht_init and ht_deinit. Additionally, you need to specify an event listener. HawkTracer currently provides 2 listeners:\nThe library provides a few helper macros for reporting data to a timeline:\nThere are few macros which report events to a global timeline, they're prefixed with G_:\nThe code registers file dump listener, which saves all the events to a file file_name.htdump.\nAssuming your events have been saved to file_name.htdump file, you can generate the JSON file running following command:\n\n\ngst-top displays performance report in real time such as top and perf-top utility.\ngst-report-1.0 generates the trace file the below two goals as following:\n\nIt display CPU usage, time usage, and execution time amon the elements. We can easily profile who spends CPU resource mostly.\nIt generate a performance graph from a GStreamer pipeline. The graph shows a transfer size as well as CPU usage, time usage, and execution time.\n\n\n\n\nIt display CPU usage, time usage, and execution time amon the elements. We can easily profile who spends CPU resource mostly.\nIt generate a performance graph from a GStreamer pipeline. The graph shows a transfer size as well as CPU usage, time usage, and execution time.\n\n\nhttps://amzn.github.io/hawktracer/index.html (Doxygen book for HawkTracer)\n\n\nLow CPU/memory overhead\nMulti-platform\nHighly configurable on runtime\nEasy build integration (CMake & pkg-config files)\nPre-defined and user-defined events\nSimple macros for code instrumentation\nStreaming events to file, through TCP/IP protocol, or handling them in custom function\nClient for receiving event stream\nLibrary for parsing event stream (so you can write your own client)\n\n\nCMake-based projects\nIf you use CMake build system, you can use following code to attach HawkTracer library to your project:\n\n\npkg-config\nHawkTracer library provides pkg-config file which can be used to find required libraries and include paths. You can simply integrate it e.g. with your compilation command:\n\n\nTCP listener, which streams events over the network\nFile dump listener, which saves events to a file.\n\n\nFirst of all, install google-chrome (or chromium-brwser) in you own PC.\nOpen **chrome://tracing/ webapge after running the browser.\nClick load buttong. Then, open  file output_file.json\nYou should see a callstack with timing\n\n"});