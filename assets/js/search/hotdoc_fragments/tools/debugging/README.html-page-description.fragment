fragment_downloaded_cb({"url":"tools/debugging/README.html#page-description","fragment":"GStreamer has a debugging feature that automatically generates pipeline graphs.\nhttps://gstreamer.freedesktop.org/documentation/tutorials/basic/debugging-tools.html\nTable of Contents\nIf GStreamer has been configured with --enable-gst-debug=yes, this variable can be set to a list of debug options, which cause GStreamer to print out different types of debugging information to stderr. The variable takes a comma-separated list of \"category_name:level\" pairs to set specific levels for the individual categories. The level value ranges from 0 (nothing) to 9 (MEMDUMP).\nFor more details, refer to https://gstreamer.freedesktop.org/documentation/tutorials/basic/debugging-tools.html\nThe category_name can contain \"\" as a wildcard. For example, setting GST_DEBUG to GST_AUTOPLUG:6,GST_ELEMENT_:4, will cause the GST_AUTOPLUG category to be logged at full LOG level, while all categories starting with GST_ELEMENT_ will be logged at INFO level. To get all possible debug output, set GST_DEBUG to *:9. For debugging purposes a *:6 debug log is usually the most useful, as it contains all important information, but hides a lot of noise such as refs/unrefs. For bug reporting purposes, a *:6 log is also what will be requested usually. It's often also worth running with :3 to see if there are any non-fatal errors or warnings that might be related to the problem at hand. Since GStreamer 1.2 it is also possible to specify debug levels by name, e.g. GST_DEBUG=:WARNING,audio:LOG\nUse gst-launch-1.0 --gst-debug-help to obtain the list of all registered categories.\nTraces for buffer flow, events and messages in TRACE level.\nPrint some pipeline stats on exit.\nGet ts, average-cpuload, current-cpuload, time, and plot.\nPrint processing latencies.\nRaise a warning if a leak is detected.\nCheck if any GstEvent or GstMessage is leaked and raise a warning.\nEach NNStreamer element has the silent property. An NNStreamer element can be traced in verbose mode by setting FALSE to the silent property.\nIn each element's source code, there is DEFAULT_SILENT macro that allows you to change the default silent value. Setting FALSE to DEFAULT_SILENT and rebuilding the library will set verbose mode of the element by default without changing your application code.\nRegardless of whether you are using gst-launch-1.0 or a GStreamer application, you have to need to define the GST_DEBUG_DUMP_DOT_DIR environment variable.\nGStreamer uses this environment variable as the output location to generate pipeline graphs.\nTo obtain .dot files, simply set the GST_DEBUG_DUMP_DOT_DIR environment variable to point to the folder where you want the files to be placed.\nYou must install the below packages to visualize the pipeline operations.\nIf you're using a custom GStreamer application, you'll need to use GStreamer debug macros to trigger pipeline generation.\nFor instance, to see a complete pipeline graph, add the following macro invocation at the point in your application where your pipeline elements have been created and linked:\nIf you are using a custom GStreamer app, pipeline files will only be triggered based on your invocation of the GST_DEBUG_BIN_TO_DOT_FILE() macros.\nXDot is an interactive viewer for graphs written in Graphviz's dot language. You can view the pipeline graph graphically with XDot.\n\nIf you want to get a PDF format file from .dot file, You need to convert the to a graphical format with dot command.\nThe below exampe shows how to render PAUSED_READY.dot pipeline.\nFirst of all, try to build NNStreamer source code with cmake in nnstreamer/build folder.\nAnd then, you can see elements and caps graph in a pipeline.\ngst-debugger (a.k.a Gstreamer Debugger) toolset allows to introspect gst-pipeline remotely. It provides graphical client, and GStreamer's plugin.\nThis guide is written on Ubuntu 16.04 X86_64 distribution.\nThe toolset consists of the rich client, and debugserver (Default port: 8080). debugserver is implemented as a tracer plugin, and has to be loaded with your pipeline as following:\nNow you can use a debugging client to connect to the debugger and inspect your pipeline as following:\nStarting from now, enjoy a debugging with gst-debugger.\n\n\n\nhttps://gstreamer.freedesktop.org/documentation/tutorials/basic/debugging-tools.html\n\n\nTable of Contents\n\nDisplaying debug messages with $GST_DEBUG\nGenerating pipeline graph with $GST_DEBUG_DUMP_DOT_DIR\nDebugging remotely with gst-debugger\n\n\n\n\nDisplaying debug messages with $GST_DEBUG\nGenerating pipeline graph with $GST_DEBUG_DUMP_DOT_DIR\nDebugging remotely with gst-debugger\n\n\n1 (ERROR): Logs all fatal errors.\n2 (WARNING): Logs all warnings.\n3 (FIXME): Logs all fixme messages.\n4 (INFO): Logs all informational messages.\n5 (DEBUG): Logs all debug messages.\n6 (LOG): Logs all log messages.\n7 (TRACE): Logs all trace messages.\n9 (MEMDUMP): Log all memory dump messages.\n\n\nhttps://github.com/GStreamer/gstreamer/blob/master/scripts/gst-plot-traces.sh\n\n\nhttps://gstreamer.freedesktop.org/documentation/tutorials/basic/debugging-tools.html#getting-pipeline-graphs\n\n\nGST_DEBUG_BIN_TO_DOT_FILE()\nGST_DEBUG_BIN_TO_DOT_FILE_WITH_TS()\n\n"});