fragment_downloaded_cb({"url":"writing-subplugin-tensor-filter.html#a-tensor_filter-subplugin-c-class","fragment":"A tensor_filter subplugin C++ class\nYou may also find other subplugins inheriting the tensor_filter_subplugin class in [/ext/nnstreamer/tensor_filter] that can be used as examples.\nIf the framework or backend/runtime library has C++ APIs or you want to write the subplugin in C++, use #include <nnstreamer_cppplugin_api_filter.hh> and inherit the base class, nnstreamer::tensor_filter_subplugin.\nWith this interface, subplugin writers are supposed to write their own concrete class based on nnstreamer::tensor_filter_subplugin by filling up virtual methods (methods marked These should be filled/implemented by subplugin authores).\nMandatory methods to be filled are declared as pure virtual function and optional methods are declared as regular virtual function (eventHandler).\nAs in C subplugin, the derived (concrete) class should be registered at init and unregistered at exit.\nSubplugin writers are supposed to use the static methods of the base class, register_subplugin() and unregister_subplugin(); refer to the function init_filter_snap() and fini_filter_snap() in the reference example.\nNote that C++ subplugin is simpler and easy-to-maintain compared to C subplugin. Unless you really need to write your subplugin in C, we recommend to use the nnstreamer::tensor_filter_subplugin base class.\n\nInterface: /gst/nnstreamer/include/nnstreamer_cppplugin_api_filter.hh\n\nReference (example): /ext/nnstreamer/tensor_filter/tensor_filter_snap.cc\n\n\n"});