fragment_downloaded_cb({"url":"Documentation/writing-subplugin-tensor-filter.html#page-description","fragment":"You can support a new neural-network framework (e.g., Tensorflow and Caffe) or a new neural-network hardware accelerator with its own software interface (e.g., openVINO for NCS and some python library for edge-TPU) by writing a tensor_filter subplugin.\nIt is called \"subplugin\" because it is a plugin for a GStreamer plugin, tensor_filter.\nYou can start writing a tensor_filter subplugin easily by using code-template/generator from nnstreamer-example.git. It is in /templates/tensor_filter_subplugin of nnstreamer-example.git. The following is how to start writing a subplugin with the template for Tizen devices (5.5 M2 +). In this example, the target subplugin name is example.\nThen, in src directory, you can fill in the callbacks.\nIf you need to add dependencies for additional libraries of your own libraries, edit meson.build and packaging/*.spec accordingly as well.\nThen, use gbs to build and package your subplugin for Tizen:\nAlthough we supply a packaging script for Tizen only, the code and build script (meson.build) supports other software platforms as well; you may build it with meson and install to appropriate paths.\nIn case you are interested in the internals, here goes a few more details.\nNNStreamer plugins and libraries are licensed as LGPL. Thus subplugins and applications based on NNStreamer may be licensed with any licenses including proprietary licenses (non-open source) as long as NNStreamer is used as shared libraries assuming that other LGPL conditions are met. Besides, we allow to write subplugins with the given template codes without any licensing condition. Thus, do not worry about licensing for subplugins.\nAs you can see in packaging/*.spec and meson.build of the template, nnstreamer-dev is the only mandatory dependency. Anyway, of course, you need to add dependencies for your own library/hardware usages.\nIn order to provide callbacks required by tensor_filter, you need to include nnstreamer_plugin_api_filter.h, which is supplied with nnstreamer-dev package (in Tizen or Ubuntu).\nThere is a templated test suite provided inside nnstreamer-test-dev package for dpkg, nnstreamer-test-devel for tizen distro.\nYou may install or BuildRequire this package to utilize predefined test templates.\nAfter installing the package, you can locate the package.\nThere are two test template provided. One is conf file for the test enviornment, and the other is for the basic unittests (requires gtest).\nList of variables that needs to be provided are provided below...\n| File                              | Variables                                                                                                                            |\nYou can change the provided each variable on the go using a script, for example...\nbut preferably, using meson through configure_data and configure_file\nand defining NNSTREAMER_CONF_PATH environment variable will locate the nnstreamer-test.ini to find your subplugin\nwith generated nnstreamer-test.ini\nYou can run the test as below:\nThe default tensor_filter subplugin path is /usr/lib/nnstreamer/filters/. It can be modified by configuring /etc/nnstreamer.ini.\nAlthough the given template code supports static input/output tensor dimension (a single neural network model is supposed to have a single set of input/output tensor/tensors dimensions), NNStreamer's tensor_filter itself supports dynamic input/output tensor/tensors dimensions; output dimensions may be determined by input dimensions, which is determined at run-time.\nIn order to support this, you need to supply an additional callback, setInputDimension defined in GstTensorFilterFramework of nnstreamer_plugin_api_filter.h.\nIn normal usage cases, a subplugin exists as a shared library loaded dynamically (dlopen) by yet another shared library, tensor_filter. By registering a tensor_filter object (a struct instance of GstTensorFilterFramework) with an init function, NNStreamer recognizes it with the given name. In the template code, it is registered with a function init_filter_${name}(). For more information, refer to the doxygen entries of GstTensorFilterFramework in the header file.\nFor more information about the struct, refer to Doxygen Doc on GstTensorFilterFramework.\n\n\n nnstreamer-test.ini.in\n SUBPLUGIN_INSTALL_PREFIX, ENABLE_ENV_VAR, ENABLE_SYMBOLIC_LINK, TORCH_USE_GPU, TFLITE_SUBPLUGIN_PRIORITY, ELEMENT_RESTRICTION_CONFIG\n\n\n subplugin_unittest_template.cc.in\n EXT_NAME, EXT_ABBRV, MODEL_FILE,\n\n\n"});