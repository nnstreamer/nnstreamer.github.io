fragment_downloaded_cb({"url":"data-type-and-flow-control.html#timestamps","fragment":"Timestamps\nIn general, tensor_* chooses the most recent timestamp when there are multiple candidates. For example, if we are merging/muxing/aggregating two frames from sinkpads, T and T+a, where a > 0, the source pads are supposed to have T+a.\nWe have the following principles for timestamp policies. Timestamping policies of tensor_* filters should follow the given principles.\n\nTimestamp from the input source (sensors) should be preserved to sink elements.\nWhen there are multiple flows merging into one (an element with multiple sink pads), a timestamp of the most recent should be preserved.\n\nFor the current frame buffer in a sink pad, i in 1 ... n, FB(i), and T(FB(i)) is the timestamp of the current frame buffer, the timestamp of the corresponding frame buffer at source pads generated by FB(1) ... FB(n) is max(i = 1 .. n, T(FB(i))), where larger timestamp value means the more recent event.\nExample: when multiple frames of the same stream are combined by tensor_mux, according to the principle, the timestamp of the last frame of the combined frames is used for output timestamp.\nNote that this principle might cause confusion when we apply tensor_demux, where we may extract some \"old\" frames from incoming combined frames. However, as a single frame in a GStreamer stream has a single timestamp, we are going to ignore it for now.\n\n\n\n\nFor the current frame buffer in a sink pad, i in 1 ... n, FB(i), and T(FB(i)) is the timestamp of the current frame buffer, the timestamp of the corresponding frame buffer at source pads generated by FB(1) ... FB(n) is max(i = 1 .. n, T(FB(i))), where larger timestamp value means the more recent event.\nExample: when multiple frames of the same stream are combined by tensor_mux, according to the principle, the timestamp of the last frame of the combined frames is used for output timestamp.\nNote that this principle might cause confusion when we apply tensor_demux, where we may extract some \"old\" frames from incoming combined frames. However, as a single frame in a GStreamer stream has a single timestamp, we are going to ignore it for now.\n\n"});