fragment_downloaded_cb({"url":"gst/nnstreamer/tensor_transform/README.html#properties","fragment":"Properties\nmode (readable, writable): Mode used for transforming tensor\n(0): dimchg\nA mode for changing tensor dimensions\nAn option should be provided as option=FROM_DIM:TO_DIM (with a regex, ^([0-3]):([0-3])$, where NNS_TENSOR_RANK_LIMIT is 4).\nExample: Move 1st dim to 2nd dim (i.e., [a][H][W][C] ==> [a][C][H][W])\n(1): typecast\nA mode for casting data type of tensor\nAn option should be provided as option=TARGET_TYPE (with a regex, ^[u]?int(8|16|32|64)$|^float(32|64)$)\nExample: Cast the data type of upstream tensor to uint8\n(2): arithmetic\nA mode for arithmetic operations with tensor\nAn option should be provided as option=[typecast:TYPE,]add|mul|div:NUMBER..., ...\nExample 1: Element-wise add 25 and multiply 4\nExample 2: Cast the data type of upstream tensor to float32 and element-wise subtract 25\n(3): transpose\nA mode for transposing shape of tensor\nAn option should be provided as D1':D2':D3':D4 (fixed to 3)\nExample: 640:480:3:1 ==> 3:480:640:1\n(4): stand\nA mode for statistical standardization or normalization of tensor\nAn option should be provided as option=(default|dc-average)[:TYPE] where default for statistical standardization and dc-average to remove DC offset (average value). TYPE denotes output data type.\nExample: Remove DC offset, output type to float32\nacceleration (readable, writable): A flat indicating whether to enable orc acceleration\n\n\nmode (readable, writable): Mode used for transforming tensor\n\nEnum \"gtt_mode_type\" Default: -1, \"unknown\"\n\n\n(0): dimchg\n\n\nA mode for changing tensor dimensions\n\n\nAn option should be provided as option=FROM_DIM:TO_DIM (with a regex, ^([0-3]):([0-3])$, where NNS_TENSOR_RANK_LIMIT is 4).\n\n\nExample: Move 1st dim to 2nd dim (i.e., [a][H][W][C] ==> [a][C][H][W])\n... ! tensor_converter ! tensor_transform mode=dimchg option=0:2 ! ...\n\n\n\n\n\n(1): typecast\n\n\nA mode for casting data type of tensor\n\n\nAn option should be provided as option=TARGET_TYPE (with a regex, ^[u]?int(8|16|32|64)$|^float(32|64)$)\n\n\nExample: Cast the data type of upstream tensor to uint8\n... ! tensor_converter ! tensor_transform mode=typecast option=uint8 ! ...\n\n\n\n\n\n(2): arithmetic\n\n\nA mode for arithmetic operations with tensor\n\n\nAn option should be provided as option=[typecast:TYPE,]add|mul|div:NUMBER..., ...\n\n\nExample 1: Element-wise add 25 and multiply 4\n... ! tensor_converter ! tensor_transform mode=arithmetic option=add:25,mul:4 ! ...\n\n\n\nExample 2: Cast the data type of upstream tensor to float32 and element-wise subtract 25\n... ! tensor_converter ! tensor_transform mode=arithmetic option=typecast:float32,add:-25 ! ...\n\n\n\n\n\n(3): transpose\n\n\nA mode for transposing shape of tensor\n\n\nAn option should be provided as D1':D2':D3':D4 (fixed to 3)\n\n\nExample: 640:480:3:1 ==> 3:480:640:1\n... ! tensor_converter input-dim=640:480:3:1 ! tensor_transform mode=transpose option=2:1:0:3 ! ...\n\n\n\n\n\n(4): stand\n\n\nA mode for statistical standardization or normalization of tensor\n\n\nAn option should be provided as option=(default|dc-average)[:TYPE] where default for statistical standardization and dc-average to remove DC offset (average value). TYPE denotes output data type.\n\n\nExample: Remove DC offset, output type to float32\n... ! tensor_converter ! tensor_transform mode=stand option=dc-average:float32 ! ...\n\n\n\n\n\n\n\n\n\nacceleration (readable, writable): A flat indicating whether to enable orc acceleration\n\n\n\nEnum \"gtt_mode_type\" Default: -1, \"unknown\"\n\n\n(0): dimchg\n\n\nA mode for changing tensor dimensions\n\n\nAn option should be provided as option=FROM_DIM:TO_DIM (with a regex, ^([0-3]):([0-3])$, where NNS_TENSOR_RANK_LIMIT is 4).\n\n\nExample: Move 1st dim to 2nd dim (i.e., [a][H][W][C] ==> [a][C][H][W])\n... ! tensor_converter ! tensor_transform mode=dimchg option=0:2 ! ...\n\n\n\n\n\n(1): typecast\n\n\nA mode for casting data type of tensor\n\n\nAn option should be provided as option=TARGET_TYPE (with a regex, ^[u]?int(8|16|32|64)$|^float(32|64)$)\n\n\nExample: Cast the data type of upstream tensor to uint8\n... ! tensor_converter ! tensor_transform mode=typecast option=uint8 ! ...\n\n\n\n\n\n(2): arithmetic\n\n\nA mode for arithmetic operations with tensor\n\n\nAn option should be provided as option=[typecast:TYPE,]add|mul|div:NUMBER..., ...\n\n\nExample 1: Element-wise add 25 and multiply 4\n... ! tensor_converter ! tensor_transform mode=arithmetic option=add:25,mul:4 ! ...\n\n\n\nExample 2: Cast the data type of upstream tensor to float32 and element-wise subtract 25\n... ! tensor_converter ! tensor_transform mode=arithmetic option=typecast:float32,add:-25 ! ...\n\n\n\n\n\n(3): transpose\n\n\nA mode for transposing shape of tensor\n\n\nAn option should be provided as D1':D2':D3':D4 (fixed to 3)\n\n\nExample: 640:480:3:1 ==> 3:480:640:1\n... ! tensor_converter input-dim=640:480:3:1 ! tensor_transform mode=transpose option=2:1:0:3 ! ...\n\n\n\n\n\n(4): stand\n\n\nA mode for statistical standardization or normalization of tensor\n\n\nAn option should be provided as option=(default|dc-average)[:TYPE] where default for statistical standardization and dc-average to remove DC offset (average value). TYPE denotes output data type.\n\n\nExample: Remove DC offset, output type to float32\n... ! tensor_converter ! tensor_transform mode=stand option=dc-average:float32 ! ...\n\n\n\n\n\n\n\n\n\n(0): dimchg\n\n\nA mode for changing tensor dimensions\n\n\nAn option should be provided as option=FROM_DIM:TO_DIM (with a regex, ^([0-3]):([0-3])$, where NNS_TENSOR_RANK_LIMIT is 4).\n\n\nExample: Move 1st dim to 2nd dim (i.e., [a][H][W][C] ==> [a][C][H][W])\n... ! tensor_converter ! tensor_transform mode=dimchg option=0:2 ! ...\n\n\n\n\n\n(1): typecast\n\n\nA mode for casting data type of tensor\n\n\nAn option should be provided as option=TARGET_TYPE (with a regex, ^[u]?int(8|16|32|64)$|^float(32|64)$)\n\n\nExample: Cast the data type of upstream tensor to uint8\n... ! tensor_converter ! tensor_transform mode=typecast option=uint8 ! ...\n\n\n\n\n\n(2): arithmetic\n\n\nA mode for arithmetic operations with tensor\n\n\nAn option should be provided as option=[typecast:TYPE,]add|mul|div:NUMBER..., ...\n\n\nExample 1: Element-wise add 25 and multiply 4\n... ! tensor_converter ! tensor_transform mode=arithmetic option=add:25,mul:4 ! ...\n\n\n\nExample 2: Cast the data type of upstream tensor to float32 and element-wise subtract 25\n... ! tensor_converter ! tensor_transform mode=arithmetic option=typecast:float32,add:-25 ! ...\n\n\n\n\n\n(3): transpose\n\n\nA mode for transposing shape of tensor\n\n\nAn option should be provided as D1':D2':D3':D4 (fixed to 3)\n\n\nExample: 640:480:3:1 ==> 3:480:640:1\n... ! tensor_converter input-dim=640:480:3:1 ! tensor_transform mode=transpose option=2:1:0:3 ! ...\n\n\n\n\n\n(4): stand\n\n\nA mode for statistical standardization or normalization of tensor\n\n\nAn option should be provided as option=(default|dc-average)[:TYPE] where default for statistical standardization and dc-average to remove DC offset (average value). TYPE denotes output data type.\n\n\nExample: Remove DC offset, output type to float32\n... ! tensor_converter ! tensor_transform mode=stand option=dc-average:float32 ! ...\n\n\n\n\n\n\n\nA mode for changing tensor dimensions\n\n\nAn option should be provided as option=FROM_DIM:TO_DIM (with a regex, ^([0-3]):([0-3])$, where NNS_TENSOR_RANK_LIMIT is 4).\n\n\nExample: Move 1st dim to 2nd dim (i.e., [a][H][W][C] ==> [a][C][H][W])\n... ! tensor_converter ! tensor_transform mode=dimchg option=0:2 ! ...\n\n\n\n\n\nA mode for casting data type of tensor\n\n\nAn option should be provided as option=TARGET_TYPE (with a regex, ^[u]?int(8|16|32|64)$|^float(32|64)$)\n\n\nExample: Cast the data type of upstream tensor to uint8\n... ! tensor_converter ! tensor_transform mode=typecast option=uint8 ! ...\n\n\n\n\n\nA mode for arithmetic operations with tensor\n\n\nAn option should be provided as option=[typecast:TYPE,]add|mul|div:NUMBER..., ...\n\n\nExample 1: Element-wise add 25 and multiply 4\n... ! tensor_converter ! tensor_transform mode=arithmetic option=add:25,mul:4 ! ...\n\n\n\nExample 2: Cast the data type of upstream tensor to float32 and element-wise subtract 25\n... ! tensor_converter ! tensor_transform mode=arithmetic option=typecast:float32,add:-25 ! ...\n\n\n\n\n\nA mode for transposing shape of tensor\n\n\nAn option should be provided as D1':D2':D3':D4 (fixed to 3)\n\n\nExample: 640:480:3:1 ==> 3:480:640:1\n... ! tensor_converter input-dim=640:480:3:1 ! tensor_transform mode=transpose option=2:1:0:3 ! ...\n\n\n\n\n\nA mode for statistical standardization or normalization of tensor\n\n\nAn option should be provided as option=(default|dc-average)[:TYPE] where default for statistical standardization and dc-average to remove DC offset (average value). TYPE denotes output data type.\n\n\nExample: Remove DC offset, output type to float32\n... ! tensor_converter ! tensor_transform mode=stand option=dc-average:float32 ! ...\n\n\n\n"});